// This is your Prisma schema file,
// learn more about it in the docs  https //pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate  https //pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  phone         String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(USER)
  password      String
  accounts      Account[]
  sessions      Session[]
  symptomIds    String[]
  doctorProfile DoctorProfile?
  isVerfied     Boolean        @default(false)
  token         Int
  serviceId     String?        @db.ObjectId
  service       Service?       @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sepecialityId String?        @db.ObjectId
  sepeciality   Sepeciality?   @relation(fields: [sepecialityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Symptom       Symptom[]
}

model DoctorProfile {
  id                       String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName                String
  lastName                 String
  middleName               String?
  trackingNumber           String        @unique
  dob                      DateTime?
  gender                   String?
  profilePicture           String?
  bio                      String?
  medicalLicense           String?
  medicalLicenseExpiry     DateTime?
  email                    String?
  phone                    String?
  country                  String?
  city                     String?
  state                    String?
  medicalSchool            String?
  graduationYear           String?
  primarySpecialization    String?
  otherSpecialties         String[]
  boardCertificates        String[]
  hospitalName             String?
  hospitalAddress          String?
  hospitalContactNumber    String?
  hospitalEmailAddress     String?
  hospitalWebsite          String?
  hospitalHoursOfOperation String?
  servicesOffered          String[]
  insuranceAccepted        Boolean?
  langaugesSpoken          String[]
  educationHistory         String?
  research                 String?
  acoomplisments           String?
  page                     String?
  additionalDocs           String[]
  availability             Availability?
  userId                   String        @unique @db.ObjectId
  user                     User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  doctorId      String        @unique @db.ObjectId
  doctorProfile DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  monday        String[]
  tuesDay       String[]
  wednesday     String[]
  thursday      String[]
  friday        String[]
  saturday      String[]
  sunday        String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  users    User[]
  title    String
  slug     String @unique
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sepeciality {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  doctors  User[]
  title    String
  slug     String @unique
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Symptom {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  slug  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}
